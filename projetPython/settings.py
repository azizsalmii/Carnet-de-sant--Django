"""
Django settings for projetPython project.

Generated by 'django-admin startproject' using Django 4.2.
"""

from pathlib import Path
import os
import dj_database_url

# === BASE DIR ===
BASE_DIR = Path(__file__).resolve().parent.parent

# === AI MODEL PATHS (portables, sans chemins Windows en dur) ===
AI_MODELS_DIR = BASE_DIR / "ai_models"
AI_CXR_CKPT = AI_MODELS_DIR / "best_model.pth"
AI_BRAIN_CKPT = AI_MODELS_DIR / "resnet18_brain_tumor.pth"

# === SECURITY ===
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure--m92yzg)8xi)4&^mfng7**@9^it=5n5&usr=5wj&j=!qhf')
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

# Production hosts
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')
if not DEBUG:
    ALLOWED_HOSTS.append('.onrender.com')  # Allow Render domains

# === CUSTOM USER MODEL ===
AUTH_USER_MODEL = 'users.CustomUser'

# === APPLICATIONS ===
INSTALLED_APPS = [
    # Django core
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Local apps
    'users',
    'journal',
    'ai_models',
    'detection',
    'reco',  # AI-powered health recommendations
    "adminpanel",
    'rest_framework',
    'MentalHealth',
]

# === REST FRAMEWORK CONFIG ===
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# === MIDDLEWARE ===
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Serve static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# === URLS & WSGI ===
ROOT_URLCONF = 'projetPython.urls'
WSGI_APPLICATION = 'projetPython.wsgi.application'

# === TEMPLATES ===
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'detection' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# === DATABASE ===
# Use PostgreSQL in production, SQLite in development
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    # Production: PostgreSQL from Render
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    # Development: SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# === PASSWORD VALIDATORS ===
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# === INTERNATIONALIZATION ===
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Africa/Tunis'   # <- adapté à ton contexte
USE_I18N = True
USE_TZ = True

# === STATIC & MEDIA FILES ===
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'detection' / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration for production
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
}

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# === AUTH REDIRECTS ===
LOGIN_URL = '/reco/login/'                 # Page de login
LOGIN_REDIRECT_URL = '/reco/dashboard/'    # Après login
LOGOUT_REDIRECT_URL = '/'                  # Après logout

# === SECURITY ===
# Production security settings
if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    # Temporarily disable SSL redirect to test
    SECURE_SSL_REDIRECT = False  # Changed from True
    SECURE_HSTS_SECONDS = 0  # Disabled for testing
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
else:
    # Development
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# === DEFAULT FIELD TYPE ===
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
