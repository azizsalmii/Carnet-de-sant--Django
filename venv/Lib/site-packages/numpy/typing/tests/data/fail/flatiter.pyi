<<<<<<< HEAD
import numpy as np
import numpy._typing as npt

class Index:
    def __index__(self) -> int: ...
=======
from typing import Any

import numpy as np
import numpy._typing as npt


class Index:
    def __index__(self) -> int:
        ...

>>>>>>> Mental-Health

a: np.flatiter[npt.NDArray[np.float64]]
supports_array: npt._SupportsArray[np.dtype[np.float64]]

<<<<<<< HEAD
a.base = object()  # type: ignore[assignment, misc]
a.coords = object()  # type: ignore[assignment, misc]
a.index = object()  # type: ignore[assignment, misc]
a.copy(order='C')  # type: ignore[call-arg]
=======
a.base = Any  # E: Property "base" defined in "flatiter" is read-only
a.coords = Any  # E: Property "coords" defined in "flatiter" is read-only
a.index = Any  # E: Property "index" defined in "flatiter" is read-only
a.copy(order='C')  # E: Unexpected keyword argument
>>>>>>> Mental-Health

# NOTE: Contrary to `ndarray.__getitem__` its counterpart in `flatiter`
# does not accept objects with the `__array__` or `__index__` protocols;
# boolean indexing is just plain broken (gh-17175)
<<<<<<< HEAD
a[np.bool()]  # type: ignore[index]
a[Index()]  # type: ignore[call-overload]
a[supports_array]  # type: ignore[index]
=======
a[np.bool()]  # E: No overload variant of "__getitem__"
a[Index()]  # E: No overload variant of "__getitem__"
a[supports_array]  # E: No overload variant of "__getitem__"
>>>>>>> Mental-Health
